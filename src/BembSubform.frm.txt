Version =20
VersionRequired =20
PublishOption =1
Begin Form
    RecordSelectors = NotDefault
    NavigationButtons = NotDefault
    DividingLines = NotDefault
    AllowDesignChanges = NotDefault
    DefaultView =0
    ScrollBars =0
    PictureAlignment =2
    DatasheetGridlinesBehavior =3
    GridX =24
    GridY =24
    Width =17520
    DatasheetFontHeight =11
    ItemSuffix =1
    Left =150
    Top =480
    Right =8370
    Bottom =4680
    DatasheetGridlinesColor =14806254
    RecSrcDt = Begin
        0x6bd443b4d288e440
    End
    GUID = Begin
        0x757c1ff4d887a946866ee5bedc3ed5e7
    End
    DatasheetFontName ="Calibri"
    PrtMip = Begin
    End
    PrtDevMode = Begin
    End
    PrtDevNames = Begin
    End
    OnTimer ="[Event Procedure]"
    OnLoad ="[Event Procedure]"
    FilterOnLoad =0
    ShowPageMargins =0
    DisplayOnSharePointSite =1
    DatasheetAlternateBackColor =15921906
    DatasheetGridlinesColor12 =0
    FitToScreen =1
    DatasheetBackThemeColorIndex =1
    BorderThemeColorIndex =3
    ThemeFontIndex =1
    ForeThemeColorIndex =0
    AlternateBackThemeColorIndex =1
    AlternateBackShade =95.0
    PrtDevModeW = Begin
    End
    PrtDevNamesW = Begin
    End
    NoSaveCTIWhenDisabled =1
    Begin
        Begin WebBrowser
            Width =360
            Height =360
            BorderColor =10921638
            BackThemeColorIndex =1
            BorderThemeColorIndex =1
            BorderShade =65.0
            GridlineThemeColorIndex =1
            GridlineShade =65.0
        End
        Begin Section
            Height =7440
            Name ="Detail"
            GUID = Begin
                0xb095ce6f4334144885515083c672d719
            End
            AlternateBackColor =15921906
            AlternateBackThemeColorIndex =1
            AlternateBackShade =95.0
            BackThemeColorIndex =1
            Begin
                Begin WebBrowser
                    OverlapFlags =85
                    Width =17280
                    Height =7200
                    AutoActivate =1
                    Name ="browserControl"
                    OleData = Begin
                    End
                    GUID = Begin
                        0x7959ade1d0550146b01ef6540c73aa39
                    End
                    GridlineColor =10921638
                    HorizontalAnchor =2
                    VerticalAnchor =2

                    LayoutCachedWidth =17280
                    LayoutCachedHeight =7200
                    OnDocumentComplete ="[Event Procedure]"
                End
            End
        End
    End
End
CodeBehindForm
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Compare Database
Option Explicit

Private Const BROWSER_CONTROL_NAME As String = "browserControl"
Private Const BEMB_SCRIPT_FILENAME = "bemb.v1.0.0.js"
Private Const MAX_SCRIPT_INIT_WAIT_ITERATIONS = 500

'milliseconds to allow for the DocumentComplete event to return before picking back up
'in the next flow
'(works as low as 5 on my dev comp, but 100 isn't noticable, so...
Const WB_DOCCOMPLETE_EXIT_TIMER = 100

Public Event InitialNavReady()
Public Event InitializationComplete()

Private doc As Object

Public Function Eval(ByVal callString As String, Optional postFunction As String = "") As String
    'run the code specified in callString
    'this places the function return into the bembData global variable that gets returned by this function
    'optionally, add a function that will process the bembData before returning it to VBA
    '(this optional function helps clean up JS complex types into something VBA can make a little easier sense with)
    '
    'Examples:
    '   (aircode)
    '   runCode("addValues(5, 9);", "bembData = bembData + ' this is now a string';")
    '   expected return: '14 this is now a string'
    '
    'this should be callable against any scoped function in the DOM

    Dim script As String

    If postFunction = "" Then
        script = "bemb.runCode(function() { return " & EscapeVBADoubleQuotes(callString) & "});"
    Else
        script = "bemb.runCode(function() { return " & EscapeVBADoubleQuotes(callString) & "}, function() {" & EscapeVBADoubleQuotes(postFunction) & "});"
    End If

    Me.Exec script

    Eval = Me.jsBembData

End Function

Private Sub browserControl_DocumentComplete(ByVal pDisp As Object, URL As Variant)

    'The first time this runs is for about:blank (as initialized by Access itself)
    'We can't seem to navigate before the about:blank is initially loaded,
    'so when this fires for about:blank, raise an event to indicate that we can
    'now safely navigate per the user request.  Furthermore, flag this process so
    'it only happens once, thus avoiding the infinite loop
    '
    'A specific oddity is that the DOM cannot be accessed via VBA until after this
    'event returns... this makes things exceptionally difficult, as there's no other
    'event that follows this one, thus we have no way of indicating to the user that
    'the DOM is actually ready to be accessed.  Because of this, I've resorted to using
    'the rather ugly means of the form's timer with a low increment, letting this procedure
    'return and (almost) immediately picking back up in the form's Timer event.
    'The Timer event initializes the accessHost framework (adding the JS requirements
    'to the DOM) and finally raises an event when the initializations are complete,
    'letting the user know that we are now fully initialized.

    Static isAccInit As Boolean
    Static isJsFrameworkInit As Boolean

    'if we've already done here, get out
    If isJsFrameworkInit Then Exit Sub

    If Not isAccInit Then
        isAccInit = True
        RaiseEvent InitialNavReady
    Else
        isJsFrameworkInit = True
        'all this needs to do is let this proc exit and then pick up from the Timer event
        Me.TimerInterval = WB_DOCCOMPLETE_EXIT_TIMER  '(default 100, should be way more than enough)
    End If

End Sub

Private Sub Form_Load()
    Dim intTwips As Integer
    intTwips = 1440
    If Me.Parent.Name = "demoChartJS" Then
        Me.Controls.Item("browserControl").Width = 5.5 * intTwips
        Me.Controls.Item("browserControl").Height = 4 * intTwips
    End If
End Sub

Private Sub Form_Timer()
    Me.TimerInterval = 0
    Set doc = Me.browserControl.Object.Document
    InitJSForAccessHost

    'doc.Body.Scroll = "no"

    RaiseEvent InitializationComplete
End Sub

Private Sub InitJSForAccessHost()
    'load the framework script to the end of the html body

    Debug.Print Me.Name & " InitJSForAccessHost"
    Debug.Print , CurrentProject.Path
    Debug.Print , CurrentProject.Path & gstrBAEMB_DEMO
    Debug.Print , CurrentProject.Path & gstrBAEMB_DEMO & "\" & BEMB_SCRIPT_FILENAME
    Dim strReplacePath As String
    strReplacePath = Replace(CurrentProject.Path & gstrBAEMB_DEMO & "\" & BEMB_SCRIPT_FILENAME, "\", "/")
    Debug.Print , "strReplacePath = " & strReplacePath

    Me.AddSourcedScript strReplacePath
    'one DoEvents after adding a script seems to do the trick, but for the purpose
    'of loading the framework, I want an explicit check
    'Thus, wrap DoEvents in a loop that determines whether bemb is initialized and
    'add a max calls timeout to avoid infinite loops
    'This also serves as a hack of an error trap for JS script errors (particularly typos in the framework)
    If Not bembInitWaitLoop() Then
        Err.Raise vbObjectError, "Form_BembSubform.InitJSForAccessHost", _
            "The max timeout while waiting for the bemb framework instance to intialize to load was reached."
        Exit Sub
    End If

    Me.Exec "bemb.initFramework();"
    DoEvents

End Sub

Private Function bembInitWaitLoop() As Boolean
    'enter the wait loop for bemb javascript variable to initialize
    'return true if initialized, false if not

    Const jsBEMB_INITIALIZED = "bemb initialized"
    Const jsBEMB_NOT_INITIALIZED = "bemb not intitalized"

    Dim script As String
    Dim InitWaitCount As Integer

    script = ""
    script = script & "if (typeof bemb == 'undefined') {"
    script = script & "  bembData = '" & jsBEMB_NOT_INITIALIZED & "';"
    script = script & "} else {"
    script = script & "  bembData = '" & jsBEMB_INITIALIZED & "';"
    script = script & "}"
    Debug.Print Me.Name & " bembInitWaitLoop"
    Debug.Print , "script = " & script

    Me.Exec script

'''    Debug.Print , "Me.bembData = " & Me.bembData
    While Me.bembData = jsBEMB_NOT_INITIALIZED And InitWaitCount < MAX_SCRIPT_INIT_WAIT_ITERATIONS
        InitWaitCount = InitWaitCount + 1
        Me.Exec script
        DoEvents
        'Debug.Print , "Me.bembData = " & Me.bembData & " (" & InitWaitCount & ")"
    Wend

    bembInitWaitLoop = IIf(Me.bembData = jsBEMB_INITIALIZED, True, False)

End Function

Public Sub AddSourcedScript(ByVal PathOrCDN As String)
    'load a file or CDN based script into the DOM

    Dim script As String

    Debug.Print Me.Name & " AddSourcedScript"
    Debug.Print , "PathOrCDN = " & PathOrCDN

    script = "var script = document.createElement(""script"");" & _
            "script.type = ""text/javascript"";" & _
            "script.src = """ & PathOrCDN & """;" & _
            "document.body.appendChild(script);"
    Debug.Print , "script = " & script

    Me.Exec script

    DoEvents    'based on initializing the framework, at least one of these seems to be needed
                'maybe more than one, but I've handled this explicitly in the js ini proc and
                'will revisit here if it becomes a problem elsewhere

End Sub

Public Property Get BrowserControlName() As String
    BrowserControlName = BROWSER_CONTROL_NAME
End Property

Public Property Get bembData() As String
    Debug.Print "Get bembData"
    bembData = doc.script.bembData
End Property

Public Sub Exec(script As String)

    On Error GoTo Err_Proc
    Static varStatic As Variant

    If IsEmpty(varStatic) Then
        Debug.Print Me.Name & " Exec"
        Debug.Print , "This is found in Form_Timer: Set doc = Me.browserControl.Object.Document"
        Debug.Print , "Me.browserControl.Name = " & Me.browserControl.Name
        Debug.Print , "Me.browserControl.Object.Name = " & Me.browserControl.Object.Name
        Debug.Print , "Me.browserControl.Parent.Name = " & Me.browserControl.Object.Parent.Name
        Debug.Print , "Me.browserControl.ControlSource = " & Me.browserControl.ControlSource
        Debug.Print , "Me.browserControl.Visible = " & Me.browserControl.Visible
        Debug.Print , "doc.parentWindow.Name = " & doc.parentWindow.Name
        varStatic = 1
    Else
        Debug.Print Me.Name & " Exec"
    End If

    doc.parentWindow.ExecScript script

Exit_Proc:
    Exit Sub

Err_Proc:
    MsgBox "Erl=" & Erl & " Error " & Err.Number & " (" & Err.Description & ") in procedure Exec of " & Me.Name
    Resume Exit_Proc
    Resume
End Sub

Public Property Get jsBembData() As String
    'return the value of the bembData variable
    jsBembData = doc.script.bembData
End Property

Private Function EscapeVBADoubleQuotes(ByVal ValueIn As String) As String
    'convert " to ""
    EscapeVBADoubleQuotes = Replace(ValueIn, """", """""")
End Function
